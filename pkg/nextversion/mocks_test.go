// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package nextversion

import (
	"github.com/go-git/go-git/v5/plumbing"
	"github.com/go-git/go-git/v5/plumbing/object"
	"github.com/go-git/go-git/v5/plumbing/storer"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGitRepository creates a new instance of MockGitRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitRepository {
	mock := &MockGitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGitRepository is an autogenerated mock type for the GitRepository type
type MockGitRepository struct {
	mock.Mock
}

type MockGitRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitRepository) EXPECT() *MockGitRepository_Expecter {
	return &MockGitRepository_Expecter{mock: &_m.Mock}
}

// TagObject provides a mock function for the type MockGitRepository
func (_mock *MockGitRepository) TagObject(h plumbing.Hash) (*object.Tag, error) {
	ret := _mock.Called(h)

	if len(ret) == 0 {
		panic("no return value specified for TagObject")
	}

	var r0 *object.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(plumbing.Hash) (*object.Tag, error)); ok {
		return returnFunc(h)
	}
	if returnFunc, ok := ret.Get(0).(func(plumbing.Hash) *object.Tag); ok {
		r0 = returnFunc(h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*object.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(plumbing.Hash) error); ok {
		r1 = returnFunc(h)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGitRepository_TagObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagObject'
type MockGitRepository_TagObject_Call struct {
	*mock.Call
}

// TagObject is a helper method to define mock.On call
//   - h plumbing.Hash
func (_e *MockGitRepository_Expecter) TagObject(h interface{}) *MockGitRepository_TagObject_Call {
	return &MockGitRepository_TagObject_Call{Call: _e.mock.On("TagObject", h)}
}

func (_c *MockGitRepository_TagObject_Call) Run(run func(h plumbing.Hash)) *MockGitRepository_TagObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 plumbing.Hash
		if args[0] != nil {
			arg0 = args[0].(plumbing.Hash)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGitRepository_TagObject_Call) Return(tag *object.Tag, err error) *MockGitRepository_TagObject_Call {
	_c.Call.Return(tag, err)
	return _c
}

func (_c *MockGitRepository_TagObject_Call) RunAndReturn(run func(h plumbing.Hash) (*object.Tag, error)) *MockGitRepository_TagObject_Call {
	_c.Call.Return(run)
	return _c
}

// Tags provides a mock function for the type MockGitRepository
func (_mock *MockGitRepository) Tags() (storer.ReferenceIter, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tags")
	}

	var r0 storer.ReferenceIter
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (storer.ReferenceIter, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() storer.ReferenceIter); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storer.ReferenceIter)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGitRepository_Tags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tags'
type MockGitRepository_Tags_Call struct {
	*mock.Call
}

// Tags is a helper method to define mock.On call
func (_e *MockGitRepository_Expecter) Tags() *MockGitRepository_Tags_Call {
	return &MockGitRepository_Tags_Call{Call: _e.mock.On("Tags")}
}

func (_c *MockGitRepository_Tags_Call) Run(run func()) *MockGitRepository_Tags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGitRepository_Tags_Call) Return(referenceIter storer.ReferenceIter, err error) *MockGitRepository_Tags_Call {
	_c.Call.Return(referenceIter, err)
	return _c
}

func (_c *MockGitRepository_Tags_Call) RunAndReturn(run func() (storer.ReferenceIter, error)) *MockGitRepository_Tags_Call {
	_c.Call.Return(run)
	return _c
}
